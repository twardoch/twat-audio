"""Test suite for twat_audio."""

import importlib.metadata
import twat_audio  # Ensure twat_audio itself is importable
from twat_audio import (
    __version__ as module_fallback_version,
)  # Fallback for non-installed scenarios


def test_version() -> None:
    """Verify package exposes version, preferring installed package metadata."""
    try:
        # Primary method: Get version from installed package metadata
        installed_version = importlib.metadata.version("twat-audio")
        assert installed_version, "Version from metadata should not be empty"
    except importlib.metadata.PackageNotFoundError:
        # Fallback: If not found (e.g., running tests without full installation),
        # rely on the __version__ attribute directly imported from the module.
        # This assumes src/twat_audio/__version__.py was generated by hatch-vcs
        # and is accessible.
        assert module_fallback_version, "Fallback module version should not be empty"

    # Optional: verify twat_audio.__version__ exists if the module is expected to have it
    # after import, regardless of how version was obtained.
    assert hasattr(twat_audio, "__version__"), (
        "twat_audio module should have __version__ attribute"
    )
    assert twat_audio.__version__, "twat_audio.__version__ should not be empty"

    # Optional: Cross-check if versions match, if both methods are expected to yield same result
    # if 'installed_version' in locals():
    #     assert twat_audio.__version__ == installed_version
    # else:
    #     assert twat_audio.__version__ == module_fallback_version


# --- Tests for audio processing ---
import pytest
from pathlib import Path
import numpy as np
from pedalboard.io import AudioFile as PedalboardAudioFile # Alias to avoid confusion if other AudioFile is used

from twat_audio.twat_audio import AudioProcessConfig, resample_audio

ORIGINAL_SAMPLERATE = 44100.0
TARGET_SAMPLERATE_RESAMPLE = 22050.0
NUM_CHANNELS = 1
DURATION_SEC = 0.1 # Short duration for faster tests

@pytest.fixture
def temp_audio_dir(tmp_path: Path) -> Path:
    """Create a temporary directory for audio files."""
    audio_dir = tmp_path / "audio_test_data"
    audio_dir.mkdir(parents=True, exist_ok=True)
    return audio_dir

def _create_dummy_wav(
    filepath: Path, samplerate: float, channels: int, duration_sec: float, frequency: float = 440.0
):
    """Helper function to create a dummy WAV file."""
    t = np.linspace(0, duration_sec, int(samplerate * duration_sec), endpoint=False)
    signal = 0.5 * np.sin(2 * np.pi * frequency * t)
    if channels == 1:
        audio_data = signal.astype(np.float32)
    elif channels == 2:
        audio_data = np.vstack([signal, signal]).T.astype(np.float32)
    else:
        raise ValueError(f"Unsupported number of channels for dummy file: {channels}")

    with PedalboardAudioFile(str(filepath), "w", samplerate, channels, audio_data.shape[0]) as f:
        if channels == 1:
            f.write(audio_data.reshape(1, -1)) # Pedalboard expects (channels, samples) for mono too if writing directly
        else:
            f.write(audio_data.T) # pedalboard expects (channels, samples)


@pytest.fixture
def dummy_wav_file(temp_audio_dir: Path) -> Path:
    """Create a standard dummy WAV file for testing."""
    filepath = temp_audio_dir / "input_original.wav"
    _create_dummy_wav(filepath, ORIGINAL_SAMPLERATE, NUM_CHANNELS, DURATION_SEC)
    return filepath

def test_resample_audio_successful(dummy_wav_file: Path, temp_audio_dir: Path):
    """Test successful audio resampling to a different sample rate."""
    output_file = temp_audio_dir / "output_resampled.wav"
    config = AudioProcessConfig(
        input_file=dummy_wav_file,
        output_file=output_file,
        target_samplerate=TARGET_SAMPLERATE_RESAMPLE,
    )
    result = resample_audio(config)

    assert result["status"] == "success"
    assert output_file.exists()
    assert result["original_samplerate"] == ORIGINAL_SAMPLERATE
    assert result["target_samplerate"] == TARGET_SAMPLERATE_RESAMPLE

    with PedalboardAudioFile(str(output_file)) as af:
        assert af.samplerate == TARGET_SAMPLERATE_RESAMPLE
        assert af.num_channels == NUM_CHANNELS
        # Duration might have a tiny difference due to resampling discrete samples
        assert abs(af.duration - DURATION_SEC) < 0.01

def test_resample_audio_same_samplerate(dummy_wav_file: Path, temp_audio_dir: Path):
    """Test audio processing when target samplerate is the same as original."""
    output_file = temp_audio_dir / "output_same_sr.wav"
    config = AudioProcessConfig(
        input_file=dummy_wav_file,
        output_file=output_file,
        target_samplerate=ORIGINAL_SAMPLERATE, # Same as original
    )
    result = resample_audio(config)

    assert result["status"] == "success"
    assert output_file.exists()
    assert result["original_samplerate"] == ORIGINAL_SAMPLERATE
    assert result["target_samplerate"] == ORIGINAL_SAMPLERATE

    with PedalboardAudioFile(str(output_file)) as af:
        assert af.samplerate == ORIGINAL_SAMPLERATE
        assert af.num_channels == NUM_CHANNELS
        assert abs(af.duration - DURATION_SEC) < 0.01 # Duration should be very close

def test_resample_audio_input_not_found(temp_audio_dir: Path):
    """Test FileNotFoundError when input audio file does not exist."""
    non_existent_file = temp_audio_dir / "non_existent_input.wav"
    output_file = temp_audio_dir / "output_error.wav"
    config = AudioProcessConfig(
        input_file=non_existent_file,
        output_file=output_file,
        target_samplerate=TARGET_SAMPLERATE_RESAMPLE,
    )

    with pytest.raises(FileNotFoundError, match=f"Input audio file not found: {non_existent_file}"):
        resample_audio(config)
    assert not output_file.exists()

def test_resample_audio_stereo(temp_audio_dir: Path):
    """Test successful audio resampling for a stereo file."""
    stereo_input_file = temp_audio_dir / "input_stereo.wav"
    _create_dummy_wav(stereo_input_file, ORIGINAL_SAMPLERATE, 2, DURATION_SEC)

    output_file = temp_audio_dir / "output_stereo_resampled.wav"
    config = AudioProcessConfig(
        input_file=stereo_input_file,
        output_file=output_file,
        target_samplerate=TARGET_SAMPLERATE_RESAMPLE,
    )
    result = resample_audio(config)

    assert result["status"] == "success"
    assert output_file.exists()
    assert result["num_channels"] == 2

    with PedalboardAudioFile(str(output_file)) as af:
        assert af.samplerate == TARGET_SAMPLERATE_RESAMPLE
        assert af.num_channels == 2
        assert abs(af.duration - DURATION_SEC) < 0.01
